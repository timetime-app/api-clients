/**
 * timetime
 * timetime API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { BookingNotificationsModel } from '../models/BookingNotificationsModel';
import { InstantInterval } from '../models/InstantInterval';
import { MaxBookingsPerTimeUnit } from '../models/MaxBookingsPerTimeUnit';
import { PutEventTypeModelLocation } from '../models/PutEventTypeModelLocation';
import { PutEventTypeModelQuestionsInner } from '../models/PutEventTypeModelQuestionsInner';
import { RepeatingAvailabilityModel } from '../models/RepeatingAvailabilityModel';
import { ResourceRules } from '../models/ResourceRules';
import { ShareWithRequestModel } from '../models/ShareWithRequestModel';
import { ThirdPartyCalendarsModel } from '../models/ThirdPartyCalendarsModel';
import { HttpFile } from '../http/http';

export class PutEventTypeModel {
    'name': string;
    'slug'?: string;
    'description'?: string;
    'userId': string;
    'duration': string;
    'step': string;
    'repeatingAvailability'?: RepeatingAvailabilityModel;
    /**
    * Limits how many concurrent bookings for this event type can happen at the same time. E.G, If it is set to 1, after one booking, the time slot is not available anymore. If null, then unlimited bookings can be made for the same time slot (unless \'availableUnits\' is set).
    */
    'maxConcurrentBookings'?: number;
    /**
    * For event types accepting multi-bookings, this sets the maximum number of people/resources that can book / be booked at the same time. Examples:  - Restaurants: This is maximum number of people that can be attended at the same time. - Bikes store: This is the amount of bikes available.
    */
    'availableUnits'?: number;
    'minUnitsPerBooking'?: number;
    /**
    * Whenever the \'availableUnits\' is set, this sets the limit of how many \'units\' can be booked per booking. Examples:  - Restaurants: This the maximum party size that can make a reservation, for example, up to groups of 10 people max. - City tour: The maximum number of people that each of your tour guides can manage.
    */
    'maxUnitsPerBooking'?: number;
    /**
    * Units is a very generic concept, depending on the use case units could be referring to \'people\', to \'bikes\'... etc. The units label is to be able to set a custom label for the units field, that will appear in the booking page next to the \'units\' selector.
    */
    'unitsLabel'?: string;
    'minBookingNotice'?: string;
    'maxBookingNotice'?: string;
    'questions': Array<PutEventTypeModelQuestionsInner>;
    'thirdPartyCalendars': ThirdPartyCalendarsModel;
    'beforeBuffer'?: string;
    'afterBuffer'?: string;
    'imageUrl'?: string;
    'busyIntervals': Set<InstantInterval>;
    'hosts': Set<ShareWithRequestModel>;
    'resourceRules'?: ResourceRules;
    'notifications'?: BookingNotificationsModel;
    /**
    * When set to false, it will never be available.
    */
    'enabled'?: boolean;
    'maxBookingsPerTimeUnit'?: MaxBookingsPerTimeUnit;
    'location'?: PutEventTypeModelLocation;
    'tags'?: { [key: string]: string; };

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "slug",
            "baseName": "slug",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "userId",
            "baseName": "userId",
            "type": "string",
            "format": "uuid"
        },
        {
            "name": "duration",
            "baseName": "duration",
            "type": "string",
            "format": ""
        },
        {
            "name": "step",
            "baseName": "step",
            "type": "string",
            "format": ""
        },
        {
            "name": "repeatingAvailability",
            "baseName": "repeatingAvailability",
            "type": "RepeatingAvailabilityModel",
            "format": ""
        },
        {
            "name": "maxConcurrentBookings",
            "baseName": "maxConcurrentBookings",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "availableUnits",
            "baseName": "availableUnits",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "minUnitsPerBooking",
            "baseName": "minUnitsPerBooking",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "maxUnitsPerBooking",
            "baseName": "maxUnitsPerBooking",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "unitsLabel",
            "baseName": "unitsLabel",
            "type": "string",
            "format": ""
        },
        {
            "name": "minBookingNotice",
            "baseName": "minBookingNotice",
            "type": "string",
            "format": ""
        },
        {
            "name": "maxBookingNotice",
            "baseName": "maxBookingNotice",
            "type": "string",
            "format": ""
        },
        {
            "name": "questions",
            "baseName": "questions",
            "type": "Array<PutEventTypeModelQuestionsInner>",
            "format": ""
        },
        {
            "name": "thirdPartyCalendars",
            "baseName": "thirdPartyCalendars",
            "type": "ThirdPartyCalendarsModel",
            "format": ""
        },
        {
            "name": "beforeBuffer",
            "baseName": "beforeBuffer",
            "type": "string",
            "format": ""
        },
        {
            "name": "afterBuffer",
            "baseName": "afterBuffer",
            "type": "string",
            "format": ""
        },
        {
            "name": "imageUrl",
            "baseName": "imageUrl",
            "type": "string",
            "format": "uri"
        },
        {
            "name": "busyIntervals",
            "baseName": "busyIntervals",
            "type": "Set<InstantInterval>",
            "format": ""
        },
        {
            "name": "hosts",
            "baseName": "hosts",
            "type": "Set<ShareWithRequestModel>",
            "format": ""
        },
        {
            "name": "resourceRules",
            "baseName": "resourceRules",
            "type": "ResourceRules",
            "format": ""
        },
        {
            "name": "notifications",
            "baseName": "notifications",
            "type": "BookingNotificationsModel",
            "format": ""
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "maxBookingsPerTimeUnit",
            "baseName": "maxBookingsPerTimeUnit",
            "type": "MaxBookingsPerTimeUnit",
            "format": ""
        },
        {
            "name": "location",
            "baseName": "location",
            "type": "PutEventTypeModelLocation",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "{ [key: string]: string; }",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return PutEventTypeModel.attributeTypeMap;
    }

    public constructor() {
    }
}

