/**
 * timetime
 * timetime API
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { InstantInterval } from '../models/InstantInterval';
import { MaxBookingsPerTimeUnit } from '../models/MaxBookingsPerTimeUnit';
import { RepeatingAvailabilityModel } from '../models/RepeatingAvailabilityModel';
import { ResourceRules } from '../models/ResourceRules';
import { ThirdPartyCalendarId } from '../models/ThirdPartyCalendarId';
import { Units } from '../models/Units';
import { HttpFile } from '../http/http';

export class BookingRules {
    /**
    * Limits how many concurrent bookings for this event type can happen at the same time. E.G, If it is set to 1, after one booking, the time slot is not available anymore. If null, then unlimited bookings can be made for the same time slot (unless \'availableUnits\' is set).
    */
    'maxConcurrentBookings'?: number;
    'repeatingAvailability'?: RepeatingAvailabilityModel;
    'checkAvailabilityInCalendars'?: Set<ThirdPartyCalendarId>;
    'minBookingNotice'?: string;
    'maxBookingNotice'?: string;
    'beforeBuffer'?: string;
    'afterBuffer'?: string;
    'units'?: Units;
    'busyIntervals'?: Set<InstantInterval>;
    'resourceRules'?: ResourceRules;
    /**
    * When set to false, it will never be available.
    */
    'enabled': boolean;
    'maxBookingsPerTimeUnit'?: MaxBookingsPerTimeUnit;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "maxConcurrentBookings",
            "baseName": "maxConcurrentBookings",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "repeatingAvailability",
            "baseName": "repeatingAvailability",
            "type": "RepeatingAvailabilityModel",
            "format": ""
        },
        {
            "name": "checkAvailabilityInCalendars",
            "baseName": "checkAvailabilityInCalendars",
            "type": "Set<ThirdPartyCalendarId>",
            "format": ""
        },
        {
            "name": "minBookingNotice",
            "baseName": "minBookingNotice",
            "type": "string",
            "format": ""
        },
        {
            "name": "maxBookingNotice",
            "baseName": "maxBookingNotice",
            "type": "string",
            "format": ""
        },
        {
            "name": "beforeBuffer",
            "baseName": "beforeBuffer",
            "type": "string",
            "format": ""
        },
        {
            "name": "afterBuffer",
            "baseName": "afterBuffer",
            "type": "string",
            "format": ""
        },
        {
            "name": "units",
            "baseName": "units",
            "type": "Units",
            "format": ""
        },
        {
            "name": "busyIntervals",
            "baseName": "busyIntervals",
            "type": "Set<InstantInterval>",
            "format": ""
        },
        {
            "name": "resourceRules",
            "baseName": "resourceRules",
            "type": "ResourceRules",
            "format": ""
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "maxBookingsPerTimeUnit",
            "baseName": "maxBookingsPerTimeUnit",
            "type": "MaxBookingsPerTimeUnit",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return BookingRules.attributeTypeMap;
    }

    public constructor() {
    }
}

